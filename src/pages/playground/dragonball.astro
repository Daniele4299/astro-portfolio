---
import Layout from "../../layouts/Layout.astro";

// Recupero dei personaggi
const characters = await fetch('https://genshinlab.com/dragon-ball-sparking-zero-characters/')
  .then((response) => response.text())
  .then((html) => {
    const characterRegex = /<article class="elementor-post[^>]*">([\s\S]*?)<\/article>/g;
    const nameRegex = /<h3 class="elementor-post__title">\s*<a[^>]*?>([^<]+)<\/a>/;
    const imageRegex = /<img[^>]*src="([^"]+)"[^>]*>/;
    const dpCostRegex = /cost-cost-(\d+)/;

    const characters = [];
    let match;

    while ((match = characterRegex.exec(html)) !== null) {
      const characterHtml = match[0];

      const nameMatch = nameRegex.exec(characterHtml);
      const name = nameMatch ? nameMatch[1].trim() : 'Nome non disponibile';
      
      const imageMatch = imageRegex.exec(characterHtml);
      const image = imageMatch ? imageMatch[1] : '';
      
      const dpCostMatch = dpCostRegex.exec(characterHtml);
      const dpCost = dpCostMatch ? parseInt(dpCostMatch[1], 10) : 'Costo non disponibile';

      characters.push({ name, image, dpCost });
    }

    return characters;
  });

// Variabili di stato per il filtro
let filteredCharacters = [...characters];
let searchQuery = '';
let selectedCost: number | null = null;

// Funzione di filtro
function filterCharacters() {
  filteredCharacters = characters.filter((character) => {
    const matchesName = character.name.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCost = selectedCost === null || character.dpCost === selectedCost;
    return matchesName && matchesCost;
  });
}
---

<Layout title="Playground - Dragon Ball Tournament Generator" description="Powered by Dragon Ball Sparking">
  <div class="w-screen flex flex-col justify-start items-start max-w-3xl mx-auto p-8 text-white">
    <a
      href="/playground"
      class="text-white bg-neutral-900 hover:bg-neutral-800 px-4 py-2 mb-8 border-1 border-solid border-neutral-600 rounded-lg"
    >
      Back
    </a>
  </div>

  <main class="text-white m-auto p-2 grid gap-4 max-w-6xl overflow-y-auto relative w-full sm:p-4 sm:gap-2">
    <h1 class="text-2xl mb-4">Dragon Ball Tournament Generator</h1>

    <p class="text-lg mb-2">Personaggi selezionabili: {filteredCharacters.length}</p>

    <div class="mb-4">
      <!-- Barra di ricerca -->
      <input
        type="text"
        placeholder="Cerca per nome..."
        class="bg-neutral-800 text-white p-2 rounded-md"
        oninput="searchQuery = this.value; filterCharacters();"
      />
    </div>

    <div class="mb-4">
      <span>Filtra per costo DP:</span>
      <div class="flex gap-2 mt-2">
        {[...Array(10).keys()].map((i) => (
          <button
            class="bg-neutral-800 text-white p-2 rounded-md"
            onclick={`selectedCost = selectedCost === ${i + 1} ? null : ${i + 1}; filterCharacters();`}
          >
            {i + 1}
          </button>
        ))}
      </div>
    </div>

    <div class="grid grid-cols-2 gap-4 sm:grid-cols-2">
      {filteredCharacters.length > 0 ? (
        filteredCharacters.map((character) => (
          <div class="card bg-neutral-800 p-4 rounded-lg flex items-center justify-center flex-col">
            <div class="w-full h-40 overflow-hidden relative mb-2 rounded-t-lg">
              <img
                src={character.image}
                alt={character.name}
                class="w-full h-full object-cover absolute top-0 left-0"
                style="object-position: top;"
              />
            </div>
            <h2 class="text-xl text-center">{character.name}</h2>
            <p>Costo in DP: {character.dpCost}</p>
          </div>
        ))
      ) : (
        <p>No characters available.</p>
      )}
    </div>
  </main>

  <script>
    import { stagger, spring, timeline, type TimelineDefinition } from "motion";
    import { loaderAnimation } from "../../lib/constants";
    const cards = document.querySelectorAll(".card");

    const sequence = [
      loaderAnimation,
      [
        cards,
        { y: ["40%", "0%"], opacity: [0, 1] },
        {
          at: "-0.1",
          duration: 0.4,
          delay: stagger(0.3),
          easing: spring({ velocity: 100, stiffness: 50, damping: 10 }),
        },
      ],
    ];

    timeline(sequence as TimelineDefinition);
  </script>
</Layout>
